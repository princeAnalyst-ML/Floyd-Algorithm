
 
#Vertices number on the weighted graph
H = 4
 

INF = 99999
 
# Solve all the pair of the shortest path using the Floyd Warshall Algorithm
 
def FloydWarshall(weighted_graph):
   
   #distance represents the output matrix that will have the shortest path between each vertices pair. 
 
    distance = list (map(lambda x: list(map(lambda y: y, x)), weighted_graph))   

    for k in range(H):
        # pick all vertices as source one by one
        for x in range(H):
 
            # Pick all vertices as destination for the above picked source
            
            for y in range(H):
 
                # Let say vertex k is found on the shortest path from x and y. We go ahead to update the value of distance of x and y. 
                distance[x][y] = min(distance[x][y],
                              distance[x][k] + distance[k][y]
                                 
    printSolution(distance)

# Function below is a untility function that will print the target solution

def printSolution(distance):
    print (" The matrix below represents the shortest path between vertices pairs”)

    for x in range(H):
        for y in range(H):
            if(distance[x][y] == INF):
                print ("%7s" % ("INF"), end=" ")
            else:
                print ("%7d\t" % (distance[x][y]), end=' ')
            if y == H-1:
                print ()
 
 
# Driver program to test the above program Let us create the following weighted graph

            10
       (0) -------> (3)
        |             /|\
      5 |             |
        |              | 1
       \|/             |
       (1) -------> (2)
            3           
graph = [[0, 5, INF, 10],
         [INF, 0, 3, INF],
         [INF, INF, 0, 1],
         [INF, INF, INF, 0]
         ]
# Print the solution of your code
FloydWarshall(graph)

